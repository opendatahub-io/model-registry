diff --git a/catalog/internal/server/openapi/api_model_catalog_service.go b/catalog/internal/server/openapi/api_model_catalog_service.go
index 72e4054d..dc09f621 100644
--- a/catalog/internal/server/openapi/api_model_catalog_service.go
+++ b/catalog/internal/server/openapi/api_model_catalog_service.go
@@ -117,6 +117,21 @@ func (c *ModelCatalogServiceAPIController) FindSources(w http.ResponseWriter, r
 func (c *ModelCatalogServiceAPIController) GetModel(w http.ResponseWriter, r *http.Request) {
 	sourceIdParam := chi.URLParam(r, "source_id")
 	modelNameParam := chi.URLParam(r, "*")
+
+	// Special handling for getModel to delegate /artifacts requests to getAllModelArtifacts
+	// The wildcard /* pattern catches /artifacts requests, but we want those to go to GetAllModelArtifacts
+	if strings.HasSuffix(r.URL.Path, "/artifacts") {
+		// Extract the model name by removing the /artifacts suffix
+		modelName := strings.TrimSuffix(modelNameParam, "/artifacts")
+
+		// Add the model_name parameter to the route context so GetAllModelArtifacts can access it
+		chi.RouteContext(r.Context()).URLParams.Add("model_name", modelName)
+
+		// Call the GetAllModelArtifacts handler directly
+		c.GetAllModelArtifacts(w, r)
+		return
+	}
+
 	result, err := c.service.GetModel(r.Context(), sourceIdParam, modelNameParam)
 	// If an error occurred, encode the error with the status code
 	if err != nil {
@@ -165,8 +165,20 @@ func (c *ModelCatalogServiceAPIController) GetAllModelArtifacts(w http.ResponseW
 	query := r.URL.Query()
 	sourceIdParam := chi.URLParam(r, "source_id")
 	modelNameParam := chi.URLParam(r, "model_name")
-	artifactTypeParam := strings.Split(query.Get("artifactType"), ",")
-	artifactType2Param := strings.Split(query.Get("artifact_type"), ",")
+	artifactTypeParam := make([]model.ArtifactTypeQueryParam, 0)
+	// Handle multiple artifactType parameters (camel case - preferred)
+	for _, v := range query["artifactType"] {
+		if v != "" {
+			artifactTypeParam = append(artifactTypeParam, model.ArtifactTypeQueryParam(v))
+		}
+	}
+	// Handle multiple artifact_type parameters (snake case - deprecated, will be removed in future)
+	for _, v := range query["artifact_type"] {
+		if v != "" {
+			artifactTypeParam = append(artifactTypeParam, model.ArtifactTypeQueryParam(v))
+		}
+	}
+	var artifactType2Param []model.ArtifactTypeQueryParam
 	pageSizeParam := query.Get("pageSize")
 	orderByParam := query.Get("orderBy")
 	sortOrderParam := query.Get("sortOrder")
